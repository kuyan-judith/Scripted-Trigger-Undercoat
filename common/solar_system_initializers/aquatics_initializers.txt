
@jumps = 3
@asteroid_min_size = 2
@asteroid_max_size = 4
@frozen_world_min_size = 9
@frozen_world_max_size = 20

# Ocean Paradise Origin
ocean_paradise_start = {
	class = "sc_a"
	flags = { empire_home_system }
	usage = origin
	asteroid_belt = {
		type = icy_asteroid_belt
		radius = 115
	}
	init_effect = {
		every_neighbor_system = {
			set_star_flag = empire_cluster
			every_neighbor_system = {
				set_star_flag = empire_cluster
			}
		}
		generate_home_system_resources = yes
		if = {
			limit = {
				is_inside_nebula = no
			}
			create_nebula = {
				radius = 25
				effect = { nebula_cloaking_effect = yes }
			}
			set_star_flag = ocean_paradise_nebula
		}
	}

	# Star
	planet = {
		class = star
		orbit_distance = 0
		orbit_angle = 0
		size = 28
		has_ring = no
	}

	# Homeworld
	change_orbit = 60
	planet = {
		class = "pc_ocean"
		orbit_angle = -45
		orbit_distance = 0
		size = 30
		entity = "ocean_paradise_planet_01_entity"
		modifiers = none
		starting_planet = yes
		flags = { ignore_startup_effect }
		init_effect = {
			prevent_anomaly = yes
		}
	}

	# Nearby Frozen World to show off homeworld size
	planet = {
		class = pc_frozen
		orbit_angle = -17
		orbit_distance = 25
		size = @frozen_world_min_size
	}

	# Ice Asteroids
	change_orbit = 26
	planet = {
		count = 10
		class = pc_ice_asteroid
		orbit_distance = { min = 0 max = 1 }
		orbit_angle = { min = 10 max = 36 }
		size = { min = @asteroid_min_size max = @asteroid_max_size }
	}

	# Random Frozen Worlds
	planet = {
		count = 3
		class = pc_frozen
		orbit_distance = { min = 20 max = 40 }
		orbit_angle = { min = 10 max = 36 }
		size = { min = @frozen_world_min_size max = @frozen_world_max_size }
	}

	# Guaranteed habitables - turned into Frozen Worlds in aquatics.1001
	neighbor_system = {
		trigger = { num_guaranteed_colonies >= 2 }
		hyperlane_jumps = { min = 1 max = @jumps }
		initializer = "neighbor_t1"
	}
	neighbor_system = {
		trigger = { num_guaranteed_colonies >= 1 }
		hyperlane_jumps = { min = 1 max = @jumps }
		initializer = "neighbor_t1_first_colony"
	}
	init_effect = { # undercoat
		every_system_planet = { fire_on_action = { on_action = on_planet_spawned } }
		fire_on_action = { on_action = on_system_spawned }
	}
}
