replicatory_association_insurance = {
	potential = {
		is_megacorp = yes
		is_cloning_authority = yes
	}

	#Fires when the policy group first becomes available
	on_activate = {

	}

	option = {
		name = replicatory_association_insurance_stellar
		policy_flags = {
			replicatory_association_insurance_stellar
		}
		ai_weight = {
			weight = 1
		}
	}
	option = {
		name = replicatory_association_insurance_platinium
		policy_flags = {
			replicatory_association_insurance_platinium
		}
		ai_weight = {
			weight = 1
		}
	}
	option = {
		name = replicatory_association_insurance_basic
		policy_flags = {
			replicatory_association_insurance_basic
		}
		ai_weight = {
			weight = 1
		}
	}
}

homogenous_class = {
	potential = {
		is_dictatorial_authority = yes
		is_cloning_authority = yes
	}

	#Fires when the policy group first becomes available
	on_activate = {

	}

	option = {
		name = homogenous_class_scientists
		policy_flags = {
			homogenous_class_scientists
		}
		modifier = {
			scientist_exp_gain = 0.15
		}
		ai_weight = {
			weight = 1
			modifier = {
				factor = 5
				government_prefers_scientists = yes
			}
			modifier = {
				factor = 5
				exists = ruler
				ruler = {
					leader_is_scientist_stu = yes # undercoat: moved to scripted trigger
				}
			}
		}
	}
	option = {
		name = homogenous_class_officials
		policy_flags = {
			homogenous_class_officials
		}
		modifier = {
			official_exp_gain = 0.15
		}
		ai_weight = {
			weight = 1
			modifier = {
				factor = 5
				government_prefers_officials = yes
			}
			modifier = {
				factor = 5
				exists = ruler
				ruler = {
					leader_is_official_stu = yes # undercoat: moved to scripted trigger
				}
			}
		}
	}
	option = {
		name = homogenous_class_commanders
		modifier = {
			commander_exp_gain = 0.15
		}
		policy_flags = {
			homogenous_class_commanders
		}
		ai_weight = {
			weight = 1
			modifier = {
				factor = 5
				government_prefers_commanders = yes
			}
			modifier = {
				factor = 5
				exists = ruler
				ruler = {
					leader_is_commander_stu = yes # undercoat: moved to scripted trigger
				}
			}
		}
	}
}

behemoth_egg_policy = {
	potential = {
		OR = {
			has_country_flag = behemoth_fast_egg
			has_country_flag = behemoth_slow_egg
		}
	}

	option = {
		name = behemoth_egg_policy_mixed

		policy_flags = {
			behemoth_egg_policy_mixed
		}

		ai_weight = {
			weight = 1
		}
	}
	option = {
		name = behemoth_egg_policy_maulers

		policy_flags = {
			behemoth_egg_policy_maulers
		}

		ai_weight = {
			weight = 0
		}
	}
	option = {
		name = behemoth_egg_policy_weavers

		policy_flags = {
			behemoth_egg_policy_weavers
		}

		ai_weight = {
			weight = 0
		}
	}
	option = {
		name = behemoth_egg_policy_harbingers

		policy_flags = {
			behemoth_egg_policy_harbingers
		}

		potential = {
			owner = {
				has_technology = tech_harbingers
			}
		}

		ai_weight = {
			weight = 0
		}
	}
	option = {
		name = behemoth_egg_policy_stingers

		policy_flags = {
			behemoth_egg_policy_stingers
		}

		potential = {
			owner = {
				has_technology = tech_stingers
			}
		}

		ai_weight = {
			weight = 0
		}
	}
}
