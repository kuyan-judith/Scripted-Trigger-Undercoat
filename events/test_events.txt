#########################################
#
# Henrik's Test Events
#
#########################################

# namespace = henrik
# planet_event = {
# 	id = henrik.31
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_planet_size = 20
# 	}
# }

# planet_event = {
# 	id = henrik.32
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_planet_devastation = 1
# 	}
# }

# planet_event = {
# 	id = henrik.33
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_planet_devastation = -100
# 	}
# }

# planet_event = {
# 	id = henrik.1
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_deposit = random
# 	}
# }

#event = {
#	id = henrik.11
#	hide_window = yes
#
#	trigger = { always = no }
#
#	immediate = {
#		random_country = {
#			weights = {
#				base = 1
#				modifier = {
#					is_ai = no
#					add = 5
#				}
#			}
#			add_resource = { influence = 5 }
#		}
#	}
#}

#########################################
#
# Miranda's Test Events
#
#########################################

# # Spawning the hatchling
# planet_event = {
# 	id = henrik.25
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		save_event_target_as = hatchling_egg
# 		set_planet_entity = {
# 			entity = "infected_planet_01_stage_3_entity"
# 		}

# 		if = {
# 			limit = {
# 				exists = owner
# 			}
# 			owner = {
# 				save_global_event_target_as = egg_owner
# 			}
# 		}
# 		change_pc = pc_egg_cracked
# 		destroy_colony = yes
# 		clear_deposits_stu = yes # undercoat: moved to scripted effect
# 		add_deposit = d_society_10
# 		add_deposit = d_society_10

# 		remove_modifier = seismological_phenomena_2
# 		solar_system = {
# 			random_system_planet = {
# 				limit = { is_star = no }
# 				save_event_target_as = new_location
# 			}
# 		}
# 		create_country = {
# 			name = "NAME_Voidspawn"
# 			type = guardian_hatchling
# 			flag = {
# 				icon = {
# 					category = "spherical"
# 					file = "flag_spherical_6.dds"
# 				}
# 				background = {
# 					category = "backgrounds"
# 					file = "00_solid.dds"
# 				}
# 				colors = {
# 					"red"
# 					"red"
# 					"null"
# 					"null"
# 				}
# 			}
# 			effect = {
# 				if = {
# 					limit = {
# 						NOT = {
# 							has_modifier = hatchling_power
# 						}
# 					}
# 					add_modifier = {
# 						modifier = hatchling_power
# 						days = -1
# 					}
# 				}
# 				save_global_event_target_as = hatchling_country
# 				set_country_flag = hatchling_country
# 				if = {
# 					limit = {
# 						exists = event_target:egg_owner
# 					}
# 					event_target:egg_owner = {
# 						establish_communications_no_message = event_target:hatchling_country
# 					}
# 				}
# 				else_if = {
# 					limit = {
# 						root = {
# 							solar_system = {
# 								has_owner = yes
# 							}
# 						}
# 					}
# 					root.solar_system.owner = {
# 						establish_communications_no_message = event_target:hatchling_country
# 					}
# 				}
# 				create_fleet = {
# 					name = "NAME_Voidspawn"
# 					settings = {
# 						spawn_debris = no
# 						is_boss = yes
# 					}
# 					effect = {
# 						set_owner = event_target:hatchling_country
# 						create_ship = {
# 							#name = "NAME_Voidspawn"
# 							#design = "NAME_Voidspawn"
# 							name = NAME_Nanite_Dragon
# 							design = NAME_Nanite_Dragon
# 							effect = {
# 								set_ship_flag = hatchling_ship
# 								save_global_event_target_as = hatchling
# 								set_disabled = yes
# 							}
# 						}
# 						save_global_event_target_as = hatchling_fleet
# 						set_location = {
# 							target = event_target:hatchling_egg
# 							distance = 0
# 							angle = 90
# 							direction = in_system
# 						}
# 						set_fleet_stance = aggressive
# 						set_aggro_range_measure_from = self #or return_point
# 						set_aggro_range = 300
# 						auto_move_to_planet = {
# 							target = event_target:new_location
# 							clear_auto_move_on_arrival = no	# distar.5008 sets a new auto move target
# 						}
# 					}
# 				}
# 			}
# 		}
# 		if = {
# 			limit = {
# 				exists = event_target:egg_owner
# 			}
# 			event_target:egg_owner = {
# 				country_event = { id = distar.5007 }
# 			} # Triggers Notification
# 		}
# 		else_if = {
# 			limit = {
# 				solar_system = {
# 					has_owner = yes
# 				}
# 			}
# 			solar_system = { owner = { country_event = { id = distar.5007 } } } # Triggers Notification
# 		}
# 	}
# }

# planet_event = {
# 	id = henrik.30
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_planet_size = 20
# 		change_pc = pc_shattered
# 		create_ambient_object = {
# 			type = dreadnought_object
# 			entity_face_object = root
# 		}
# 		last_created_ambient_object = {
# 			set_location = {
# 				target = root
# 				distance = -1
# 				#angle = 90
# 				#direction = in_system
# 			}
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.40
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		capital_scope = {
# 			create_fleet = {
# 				name = "NAME_Raiding_Fleet"
# 				effect = {
# 					set_owner = root
# 					while = {
# 						count = 24
# 						create_ship = {
# 							name = random
# 							design = "NAME_Outrider"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					while = {
# 						count = 14
# 						create_ship = {
# 							name = random
# 							design = "NAME_Lancer"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					while = {
# 						count = 4
# 						create_ship = {
# 							name = random
# 							design = "NAME_Void_Champion"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					set_location = prev
# 				}
# 			}
# 		}
# 	}
# }

# on_crossing_border test
#fleet_event = {
#	id = henrik.45
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = { owner = { is_ai = no } }
#
#	immediate = {
#		if = {
#			limit = {
#				from = { exists = space_owner }
#				fromfrom = { NOT = { exists = space_owner } }
#			}
#			set_name = "Exited Borders"
#		}
#		else_if = {
#			limit = {
#				from = { NOT = { exists = space_owner } }
#				fromfrom = { exists = space_owner }
#			}
#			set_name = "Entered Borders"
#		}
#		else_if = {
#			limit = {
#				from = { exists = space_owner }
#				fromfrom = { exists = space_owner }
#			}
#			set_name = "Crossed Borders"
#		}
#		else = {
#			set_name = "Error'd!"
#		}
#	}
#}

# country_event = {
# 	id = henrik.50
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		capital_scope = {
# 			create_fleet = {
# 				name = this
# 				effect = {
# 					set_owner = root
# 					while = {
# 						count = 24
# 						create_ship = {
# 							name = root
# 							design = "NAME_Outrider"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					while = {
# 						count = 14
# 						create_ship = {
# 							name = root
# 							design = "NAME_Lancer"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					while = {
# 						count = 4
# 						create_ship = {
# 							name = root
# 							design = "NAME_Void_Champion"
# 							prefix = no
# 							graphical_culture = "pirate_01"
# 						}
# 					}
# 					set_location = prev
# 				}
# 			}
# 		}
# 	}
# }

# country_event = {
#	id = henrik.54
#	title = PROJECT_COMPLETE
#	desc = {
#		trigger = {
#			hidden:owner = {
#				switch = {
#					trigger = has_country_flag
#					flag1 = { text = "flag1" }
#					flag2 = {
#						if = {
#							limit = { has_country_flag = flag3 }
#							text = "flag 2 and 3"
#						}
#						else = { text = "else only 2" }
#					}
#					default = { text = noflag }
#				}
#			}
#		}
#	}
#	picture = GFX_evt_star_yellow
#	show_sound = event_solar_fusion

#	trigger = { always = no }

#	option = {
#		name = "add_remove_flag1"
#		if = {
#			limit = { NOT = { has_country_flag = flag1 } }
#			set_country_flag = flag1
#		}
#		else = {
#			remove_country_flag = flag1
#		}
#	}

#	option = {
#		name = "add_remove_flag2"
#		if = {
#			limit = { NOT = { has_country_flag = flag2 } }
#			set_country_flag = flag2
#		}
#		else = {
#			remove_country_flag = flag2
#		}
#	}

#	option = {
#		name = "add_remove_flag3"
#		if = {
#			limit = { NOT = { has_country_flag = flag3 } }
#			set_country_flag = flag3
#		}
#		else = {
#			remove_country_flag = flag3
#		}
#	}
# }

# country_event = {
# 	id = henrik.55
# 	title = PROJECT_COMPLETE
# 	desc = PROJECT_COMPLETE
# 	picture = GFX_evt_star_yellow
# 	show_sound = event_solar_fusion

# 	trigger = { always = no }

# 	option = {
# 		name = nomad.511.d
# 		allow = {
# 			count_owned_pop = {
# 				limit = { always = yes }
# 				count < 3
# 				count > 3
# 			}
# 		}
# 	}

# 	option = {
# 		name = LESS_THAN
# 		allow = {
# 			count_owned_pop = {
# 				limit = { always = yes }
# 				count < 3
# 			}
# 		}
# 	}

# 	option = {
# 		name = VALUE_GREATER_THAN
# 		allow = {
# 			count_owned_pop = {
# 				limit = { always = yes }
# 				count > 3
# 			}
# 		}
# 	}
# }

#country_event = {
#	id = henrik.100
#	hide_window = yes
#
#	trigger = {
#		is_playable = yes # undercoat: moved to scripted trigger
#		NOT = { has_country_flag = observe_test }
#	}
#
#	mean_time_to_happen = {
#		months = 1
#	}
#
#	immediate = {
#		set_country_flag = observe_test
#		observer_event = { id = henrik.101 }
#	}
#}
#
#observer_event = {
#	id = henrik.101
#	title = "TEST"
#	desc = "THIS IS AN OBSERVER EVENT"
#
#	is_triggered_only = yes
#
#	option = {
#		name = OK
#	}
#}

# country_event = {
# 	id = henrik.102
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_modifier = {
# 			modifier = strategic_coordination_center_modifier
# 			days = -1
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.103
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		random_list = {
# 			1 = { give_technology = { tech = tech_akx_worm_1 } }
# 			1 = { give_technology = { tech = tech_akx_worm_2 } }
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.104
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_global_flag = galactic_market_founded
# 		country_event = { id = henrik.106 days = 2 }
# 	}
# }

# country_event = {
# 	id = henrik.106
# 	hide_window = yes

# 	is_triggered_only = yes

# 	immediate = {
# 		set_country_flag = has_market_access
# 		enable_galactic_market = yes
# 		enable_on_market = energy
# 		enable_on_market = minerals
# 		enable_on_market = food
# 		enable_on_market = consumer_goods
# 		enable_on_market = alloys
# 		add_modifier = {
# 			modifier = galactic_market_founder
# 			days = -1
# 		}
# 		set_market_leader = yes # Update who owns the market station

# 		capital_scope.star = {
# 			create_ambient_object = {
# 				type = galactic_market_station
# 				location = this
# 			}
# 			last_created_ambient_object = {
# 				save_global_event_target_as = galactic_market_station
# 				set_ambient_object_flag = galactic_market_station_flag
# 				set_location = {
# 					target = root.capital_scope.star
# 					angle = random
# 					distance = 40
# 				}
# 			}
# 		}
# 		every_playable_country = {
# 			limit = {
# 				has_communications = root
# 				NOT = { is_same_value = root }
# 				is_homicidal = no
# 			}
# 			country_event = { id = action.101 }
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.105
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_country_flag = has_market_access
# 		enable_galactic_market = yes
# 	}
# }

# country_event = {
# 	id = henrik.107
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		capital_scope = {
# 			save_global_event_target_as = market_founder_planet
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.108
# 	hide_window = yes
# 	trigger = { always = no }

# 	immediate = {
# 		random_playable_country = {
# 			limit = {
# 				NOT = { is_same_value = root }
# 			}
# 			every_owned_pop = {
# 				pop_event = { id = refugees.4 }
# 			}
# 		}
# 	}
# }

# country_event = {
# 	id = henrik.109
# 	hide_window = yes
# 	trigger = { always = no }

# 	immediate = {
# 		every_owned_pop = {
# 			pop_event = { id = refugees.4 }
# 		}
# 	}
# }

# planet_event = {
# 	id = henrik.110
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		random_country = {
# 			limit = { is_country_type = ai_empire }
# 			root = { set_controller = prev }
# 		}
# 		#set_planet_flag = event_purge
# 		#every_owned_pop = {
# 		#	set_pop_flag = event_purge
# 		#	unemploy_pop = yes
# 		#}
# 		#check_planet_employment = yes
# 		#every_owned_pop = {
# 		#	unemploy_pop = yes
# 		#	clear_pop_category = yes
# 		#	set_purge_type = {
# 		#		type = purge_matrix
# 		#		cooldown = yes
# 		#	}
# 		#}
# 	}
# }

# planet_event = {
# 	id = henrik.111
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_modifier = {
# 			modifier = chthonian_planet
# 			days = -1
# 		}
# 	}
# }

# planet_event = {
# 	id = henrik.112
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		random_playable_country = {
# 			limit = { is_ai = no }
# 			root = { set_controller = prev }
# 		}
# 		#set_planet_flag = event_purge
# 		#every_owned_pop = {
# 		#	remove_pop_flag = event_purge
# 		#	unemploy_pop = yes
# 		#}
# 		#check_planet_employment = yes
# 		#every_owned_pop = {
# 		#	unemploy_pop = yes
# 		#	clear_pop_category = yes
# 		#	set_purge_type = {
# 		#		type = purge_matrix
# 		#		cooldown = yes
# 		#	}
# 		#}
# 	}
# }

# planet_event = {
# 	id = henrik.113
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		every_owned_pop = {
# 			unemploy_pop = yes
# 			clear_pop_category = yes
# 		}
# 	}
# }

# # Add Archaeology Site
# planet_event = {
# 	id = henrik.120
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		create_archaeological_site = site_hunting_ground
# 	}
# }

# # System Effects
# planet_event = {
# 	id = henrik.150
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		star = {
# 			create_ambient_object = {
# 				type = "space_storm_1"
# 				location = this
# 			}
# 			last_created_ambient_object = {
# 				set_location = {
# 					target = prev
# 					distance = 0
# 					angle = random
# 				}
# 			}
# 		}
# 	}
# }

# namespace = daniel
# # Add Archaeology Site
# planet_event = {
# 	id = daniel.1
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		create_archaeological_site = site_hidden_lab_a
# 	}
# }

# ship_event = {
# 	id = henrik.1337
# 	hide_window = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		leader = {
# 			add_timed_trait = { trait = leader_trait_stubborn years = 1 }
# 		}
# 	}
# }

# namespace = gwenael
# country_event = {
# 	id = gwenael.3
# 	hide_window = yes
# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		if = {
# 			limit = { galaxy_size = medium }
# 			add_resource = { minerals = 1000 }
# 		}
# 	}
# }

# # Some federation events
# namespace = ilya

# country_event = {
# 	id = ilya.1
# 	hide_window = yes
# 	trigger = { always = no }

# 	immediate = {
# 		federation = {
# 			set_federation_law = fleet_contribution_high
# 			set_federation_law = succession_type_rotation
# 			set_federation_law = succession_term_years_10
# 			set_federation_law = federation_build_fleets_only_leader
# 		}
# 	}
# }

# # Add country to galactic_community
# namespace = zack
# country_event = {
# 	id = zack.1
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_to_galactic_community = yes
# 	}
# }

# country_event = {
# 	id = zack.2
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		add_modifier = {
# 			modifier = empire_size_mods
# 			days = -1
# 		}
# 	}
# }

# country_event = {
# 	id = zack.3
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		every_country = {
# 			add_to_galactic_community = yes
# 		}
# 	}
# }

# country_event = {
# 	id = zack.4
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		every_playable_country = {
# 			if = {
# 				limit = { root = { has_established_contact = prev } }
# 				root = {
# 					add_favors = {
# 						target = prev
# 						value = 8
# 					}
# 				}
# 			}
# 		}
# 	}
# }

# country_event = {
# 	id = zack.5
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_council_size = 3
# 	}
# }

# country_event = {
# 	id = zack.6
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		increase_council_size = yes
# 	}
# }

# country_event = {
# 	id = zack.7
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		decrease_council_size = yes
# 	}
# }

# country_event = {
# 	id = zack.8
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		pass_resolution = "resolution_greatergood_five_year_plans"
# 	}
# }

# country_event = {
# 	id = zack.9
# 	hide_window = yes

# 	trigger = { always = no }

# 	immediate = {
# 		set_council_size = 0
# 	}
# }

#########################################
#
# Gemma's Test Events
#
#########################################

namespace = gemma

# country_event = {
#	id = gemma.1
#	title = "federations3.2001.name"
#	desc = {
#		text = "gemma.test.1"
#		trigger = {
#			check_variable = {
#				which = gemma_var1
#				value < gemma_var2
#			}
#		}
#	}
#	desc = {
#		text = "gemma.test.2"
#		trigger = {
#			check_variable = {
#				which = gemma_var1
#				value > gemma_var2
#			}
#		}
#	}
#	picture = GFX_evt_resource_cache
#	show_sound = event_dig_site
#	is_triggered_only = yes

#	trigger = { always = no }

#	immediate = {
#		set_variable = {
#			which = gemma_var1
#			value = 1
#		}
#		set_variable = {
#			which = gemma_var2
#			value = 2
#		}
#	}

#	option = {
#		name = OK
#		change_variable = {
#			which = gemma_var1
#			value = 2
#		}
#		country_event = { id = gemma.2 days = 1 }
#	}
#	option = {
#		name = NOTIME
#		country_event = { id = gemma.2 days = 1 }
#	}
# }

# country_event = {
#	id = gemma.2
#	title = "federations3.2001.name"
#	desc = {
#		text = "gemma.test.1"
#		trigger = {
#			check_variable = {
#				which = gemma_var1
#				value < gemma_var2
#			}
#		}
#	}
#	desc = {
#		text = "gemma.test.2"
#		trigger = {
#			check_variable = {
#				which = gemma_var1
#				value > gemma_var2
#			}
#		}
#	}
#	picture = GFX_evt_resource_cache
#	show_sound = event_dig_site
#	is_triggered_only = yes

#	option = {
#		name = OK
#	}
# }

# country_event = {
#	id = gemma.3
#	hide_window = yes
#	is_triggered_only = yes

#	trigger = { always = no }

#	immediate = {
#		federation = {
#			every_member = {
#				random_system_within_border = {
#					random_system_planet = {
#						limit = {
#							NOR = {
#								is_star = yes
#								is_capital = yes
#								exists = archaeological_site
#								is_unshattered_ring_habitable_segment = yes # undercoat: moved to scripted trigger
#								is_planet_class = pc_cybrex
#								is_habitat = yes # undercoat: moved to scripted trigger
#							}
#						}
#						save_event_target_as = gemmatest_world
#					}
#				}
#				country_event = { id = gemma.5 days = 0 } #Initial test, to set/check the current empire's event target
#				country_event = { id = gemma.6 days = 20 } #Delayed test, to ensure that the other members' event targets are different and valid
#			}
#		}
#	}
# }

# planet_event = {
#	id = gemma.4
#	hide_window = yes
#	is_triggered_only = yes

#	trigger = { always = no }

#	immediate = {
#		random_system_within_border = {
#			random_system_planet = {
#				limit = {
#					NOR = {
#						is_star = yes
#						is_capital = yes
#						is_asteroid = yes
#						exists = archaeological_site
#						is_unshattered_ring_habitable_segment = yes # undercoat: moved to scripted trigger
#						is_planet_class = pc_cybrex
#						is_habitat = yes # undercoat: moved to scripted trigger
#					}
#				}
#				save_event_target_as = gemmatest_world
#			}
#		}
#		country_event = { id = gemma.5 days = 0 }
#	}
# }

# country_event = {
#	id = gemma.5
#	title = "gemma.5.name" #"TEST"
#	desc = "gemma.5.desc" #"[gemmatest_world.GetName] is the planet you are assigned."
#	is_triggered_only = yes
#	location = event_target:gemmatest_world

#	option = {
#		name = OK
#	}
# }

# country_event = {
#	id = gemma.6
#	title = "gemma.5.name" #"TEST"
#	desc = "gemma.5.desc" #"[gemmatest_world.GetName] is the planet you are assigned."
#	is_triggered_only = yes
#	location = event_target:gemmatest_world

#	option = {
#		name = OK
#	}
# }

# country_event = {
# 	id = gemma.7
# 	title =
# 	desc =
# 	is_triggered_only = yes
# 	diplomatic = yes
# 	custom_gui = "enclave_mercenary_window"
# 	custom_gui_option = "enclave_mercenary_option"

# 	picture_event_data = {
# 		portrait = root
# 		room = pre_ftl_ancient_room
# 	}

# 	option = {
# 		name =
# 		country_event = { id = gemma.7 }
# 	}
# 	option = {
# 		name =
# 		country_event = { id = gemma.8 }
# 	}
# 	option = {
# 		name =
# 		country_event = { id = gemma.9 }
# 	}
# 	option = {
# 		name =
# 		country_event = { id = gemma.10 }
# 	}
# }

# country_event = {
# 	id = gemma.8
# 	base = gemma.7

# 	picture_event_data = {
# 		portrait = root
# 		room = pre_ftl_medieval_room
# 	}
# }

# country_event = {
# 	id = gemma.9
# 	base = gemma.7

# 	picture_event_data = {
# 		portrait = root
# 		room = pre_ftl_modern_room
# 	}
# }

# country_event = {
# 	id = gemma.10
# 	base = gemma.7

# 	picture_event_data = {
# 		portrait = root
# 		room = pre_ftl_victorian_room
# 	}
# }

# espionage_operation_event = {
# 	id = gemma.11
# 	title =
# 	desc =
# 	picture = GFX_evt_infiltration_neutral
# 	show_sound = event_espionage_concluded
# 	is_triggered_only = yes
# 	espionage_operation = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		from = {
# 			set_espionage_operation_progress_locked = yes
# 		}
# 	}

# 	option = {
# 		name = EXCELLENT
# 		from = {
# 			set_espionage_operation_progress_locked = no
# 		}
# 	}
# }

# Can be used to locate a star system with a particular flag. Run "event gemma.12" and click the locator button to navigate straight to it.
# event = {
# 	id = gemma.12
# 	title =
# 	desc =
# 	picture = GFX_evt_unidentified_ship
# 	show_sound = event_default
# 	location = event_target:flag_locator
# 	is_triggered_only = yes

# 	trigger = {
# 		always = no
# 	}

# 	immediate = {
# 		random_system = {
# 			limit = {
# 				has_star_flag = legendary_leader_spawn_system # Replace this with your desired system/star flag
# 			}
# 			save_event_target_as = flag_locator
# 		}
# 	}

# 	option = {
# 		name = OK
# 	}
# }

#########################################
#
# Victor's Test Events
#
#########################################

namespace = victor
#
#country_event = {
#	id = victor.1
#	title = "anomaly.1.name"
#	desc = "anomaly.1.desc"
#	is_triggered_only = yes
#	picture = GFX_evt_mining_station
#	show_sound = event_ship_bridge
#	immediate = {
#	capital_scope = {
#	solar_system = {
#	spawn_system = {
#			min_distance = 10
#			max_distance = 12
#			max_jumps = 0
#			initializer = "solarpunk_01"
#			}
#		}
#		}
#	}
#	option = {
#		name = OK
#	}
#}
#planet_event = {
#	id = victor.2
#	title = "anomaly.10.name" #"TEST"
#	desc = "anomaly.10.desc" #"[gemmatest_world.GetName] is the planet you are assigned."
#	is_triggered_only = yes
#
#	immediate = {
#		show_city = no
#	}
#	option = {
#		name = OK
#	}
# }


#########################################
#
# Kalle's Test Events
#
#########################################

# namespace = kalle
#
# country_event = {
# 	id = kalle.1
# 	title = "anomaly.1.name"
# 	desc = "anomaly.1.desc"
# 	is_triggered_only = yes
# 	picture = GFX_evt_mining_station
# 	show_sound = event_ship_bridge

# 	trigger = {
# 		any_owned_leader = {
# 			OR = {
# 				is_councilor = yes
# 				NOT = { is_councilor = yes }
# 				councilor_type = councilor_research
# 				NOT = { councilor_type = councilor_research }
# 			}
# 		}
# 	}

# 	option = {
# 		name = OK
# 		random_owned_leader = {
# 			limit = {
# 				councilor_type = councilor_research
# 			}
# 			add_experience = 100
# 		}
# 	}
# }

#########################################
#
# Olegs's Test Events
#
#########################################

#namespace = oleg

#fleet_event = {
#	id = oleg.1
#	title = "oleg.1.name" #"TEST"
#	desc = "oleg.1.desc" #"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		random_playable_country = {
#			limit = { NOT = { is_same_value = root.owner } }
#			save_event_target_as = my_target
#		}
#
#		give_fleet = {
#			controller = event_target:my_target
#			days = 69
#		}
#	}
#}

#fleet_event = {
#	id = oleg.2
#	title = "oleg.2.name"
#	desc = "oleg.2.desc"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		if = {
#			limit = { is_leased = yes }
#			end_fleet_contract = {
#				initiator = this
#				reason = cancelled
#			}
#		}
#	}
#}


#fleet_event = {
#	id = oleg.3
#	title = "oleg.3.name"
#	desc = "oleg.3.desc"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		if = {
#			limit = { lease_days > 0 }
#			end_fleet_contract = {
#				initiator = this
#				reason = cancelled
#			}
#		}
#	}
#}

#country_event = {
#	id = oleg.4
#	title = "oleg.4.desc.name" # "Choose!"
#	desc = "oleg.4.desc" # "Copy a ship design."
#	picture = GFX_evt_atmospheric_flight
#	show_sound = event_default
#	is_triggered_only = yes
#
#	immediate = {
#		random_country = {
#			limit = {
#				any_controlled_ship = {
#					is_ship_size = corvette
#				}
#			}
#			save_event_target_as = ship_1_owner
#			random_controlled_ship = {
#				limit = { is_ship_size = corvette }
#				save_event_target_as = ship_1
#			}
#		}
#	}
#
#	option = {
#		name = "oleg.4.a" # "[event_target:ship_1_owner.GetAdj] vessel [event_target:ship_1.GetName]"
#		create_fleet = {
#			name = random
#			effect = {
#				set_owner = root
#				create_ship = {
#					name = random
#					design = event_target:ship_1 #Supports design and ship target scopes
#					#design = last_created_design
#					#random_existing_design = corvette #Only chooses from owner's own designs
#					graphical_culture = pirate_01
#					prefix = yes
#				}
#				owner = {
#					add_ship_design = event_target:ship_1
#					#add_ship_design = last_created_design
#				}
#				set_location = {
#					target = root.capital_scope
#					distance = 40
#					angle = random
#				}
#			}
#		}
#	}
#}

#fleet_event = {
#	id = oleg.5
#	title = "oleg.5.name"
#	desc = "oleg.5.desc"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		if = {
#			limit = { lease_days > 0 }
#			prolong_fleet_contract = { days = 200 }
#		}
#	}
#}

#fleet_event = {
#	id = oleg.6
#	title = "oleg.6.name" #"TEST"
#	desc = "oleg.6.desc" #"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		any_country = {
#			limit = {
#				NOT = { is_same_value = root.owner }
#				count_available_debris = {
#					count > 0
#				}
#			}
#
#			random_available_debris = {
#				pass_debris_ownership = {
#					owner = root.owner
#				}
#			}
#		}
#	}
#}

#country_event = {
#	id = oleg.7
#	title = "oleg.7.name" #"TEST"
#	desc = "oleg.7.desc" #"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		random_country = {
#			limit = {
#				NOT = { is_same_value = root }
#				count_controlled_ship = {
#					limit = { is_ship_size = corvette }
#					count > 0
#				}
#			}
#
#			random_controlled_ship = {
#				limit = { is_ship_size = corvette }
#				destroy_and_spawn_debris_for = root
#			}
#		}
#	}
#}

#country_event = {
#	id = oleg.8
#	title = "oleg.8.name" #"TEST"
#	desc = "oleg.8.desc" #"
#	is_triggered_only = yes
#	location = event_target:m0wgli_world
#	hide_window = yes
#
#	immediate = {
#		random_playable_country = {
#			limit = {
#				NOT = { is_same_value = root }
#			}
#
#			save_event_target_as = new_debris_owner
#		}
#
#		random_available_debris = {
#			save_event_target_as = found_debris
#
#			pass_debris_ownership = {
#				owner = event_target:new_debris_owner
#			}
#		}
#	}
#}

#########################
#						#
# Joachim's Test Events	#
#						#
#########################

namespace = joachim
#
#country_event = {
	#id = joachim.1
#
	#hide_window = yes
	#is_triggered_only = yes
#
	#immediate = {
		#capital_star = {
			#spawn_system = {
				#initializer = neighbor_t1_first_colony
				#min_distance = 10
				#max_distance = 30
				#max_jumps = 1
			#}
		#}
		#last_created_system = {
			#save_event_target_as = subject_system
			#random_system_planet = {
				#limit = { has_planet_flag = prescripted_ideal }
				#save_event_target_as = subject_planet
			#}
		#}
		#event_target:subject_planet = {
			#create_species = {
				#name = random
				#class = random_non_machine
				#portrait = random
				#traits = random
			#}
			#last_created_species = {
				#save_event_target_as = subject_species
			#}
			#create_country = {
				#name = random
				#authority = random
				#civics = random
				#species = event_target:subject_species
				#ethos = random
				#origin = origin_default
#
				#effect = {
					#save_event_target_as = subject_country
					#give_starting_resources_effect = yes
				#}
			#}
			#set_owner = event_target:subject_country
			#set_controller = event_target:subject_country
			#set_capital = yes
#
			#while = {
				#count = 20
				#create_pop = {
					#species = event_target:subject_species
				#}
			#}
#
			#set_surveyed = {
				#surveyed = yes
				#surveyor = root
			#}
		#}
		#event_target:subject_system = {
			#generate_home_system_resources = yes
#
			#create_starbase = {
				#owner = event_target:subject_country
				#size = starbase_starport
				#module = shipyard
				#building = crew_quarters
			#}
		#}
		#event_target:subject_country = {
			#set_subject_of_stu = { # undercoat: moved to scripted effect with on_action
				#who = root
			#}
			#establish_communications_no_message = root
#
			#capital_scope = {
				#generate_start_buildings_and_districts = yes
			#}
		#}
	#}
#}

#country_event = {
#	id = joachim.2

#	hide_window = yes
#	is_triggered_only = yes

#	immediate = {
#		trigger_scholarium_project_event = yes
#	}
#}

#country_event = {
#	id = victor.2
#	title = anomaly.1
#	desc = anomaly.1.desc
#	picture = GFX_evt_crisis_defeated
#	is_triggered_only = yes
#
#	option = {
#		name = anomaly.5.a
#		start_situation = {
#			type = leviathan_celebration_opportunity
#			target = root.capital_scope
#			effect = {
#				set_situation_flag = #celebration_stellar_devourer
#				set_situation_flag = standard_unity_reward
#			}
#		}
#	}
#}
#
#country_event = {
#	id = victor.3
#	hide_window = yes
#	is_triggered_only = yes
#
#	immediate = {
#		set_country_flag = knows_who_infested_star
#		random_country = {
#			limit = {
#				is_regular_empire = yes
#			}
#			set_country_flag = infested_star@root
#						root = {
#				add_casus_belli = {
#					type = cb_revenge_for_eaten_star
#					who = prev
#					days = 7200
#				}
#			}
#		}
#	}
#}

#namespace = dennis
#country_event = {
#	id = dennis.3
#	is_triggered_only = yes
#	hide_window = yes
#
#	 trigger = {
#		any_available_debris = {
#			num_ships_in_debris = {
#				value > 10
#				ship_size = corvette
#			}
#		}
#	}
#}

#country_event = {
#	id = dennis.4
#	is_triggered_only = yes
#	hide_window = yes
#
#	 trigger = {
#		any_available_debris = {
#			num_ships_in_debris = {
#				value < 10
#				ship_size = corvette
#			}
#		}
#	}
#}

# namespace = giada

# country_event = {
# 	id = giada.1
# 	title = giada.1.name
# 	desc = giada.1.desc
# 	picture = GFX_evt_worrying_signal
# 	is_triggered_only = yes

# 	immediate = {
# 		set_variable = {
# 			which = negative_chances
# 			value = value:kaleidoscope_negative_events_value
# 		}
# 		set_variable = {
# 			which = positive_chances
# 			value = value:kaleidoscope_positive_events_value
# 		}
# 	}

# 	option = {
# 		name = ACKNOWLEDGED
# 	}
# }
